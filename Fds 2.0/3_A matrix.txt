def add_matrices(matrix1, matrix2):
    rows = len(matrix1)
    cols = len(matrix1[0])
    result = [[0 for _ in range(cols)] for _ in range(rows)]
    
    for i in range(rows):
        for j in range(cols):
            result[i][j] = matrix1[i][j] + matrix2[i][j]
    
    return result

def subtract_matrices(matrix1, matrix2):
    rows = len(matrix1)
    cols = len(matrix1[0])
    result = [[0 for _ in range(cols)] for _ in range(rows)]
    
    for i in range(rows):
        for j in range(cols):
            result[i][j] = matrix1[i][j] - matrix2[i][j]
    
    return result

def multiply_matrices(matrix1, matrix2):
    rows1 = len(matrix1)
    cols1 = len(matrix1[0])
    rows2 = len(matrix2)
    cols2 = len(matrix2[0])

    if cols1 != rows2:
        raise ValueError("Matrix multiplication is not possible. Columns of the first matrix must equal rows of the second matrix.")
    
    result = [[0 for _ in range(cols2)] for _ in range(rows1)]
    
    for i in range(rows1):
        for j in range(cols2):
            for k in range(cols1):
                result[i][j] += matrix1[i][k] * matrix2[k][j]
    
    return result

def transpose_matrix(matrix):
    rows = len(matrix)
    cols = len(matrix[0])
    result = [[0 for _ in range(rows)] for _ in range(cols)]
    
    for i in range(rows):
        for j in range(cols):
            result[j][i] = matrix[i][j]
    
    return result

def print_matrix(matrix):
    for row in matrix:
        print(" ".join(map(str, row)))

matrix1 = [
    [1, 2, 3],
    [4, 5, 6]
]

matrix2 = [
    [7, 8, 9],
    [10, 11, 12]
]

print("Addition of matrices:")
add_result = add_matrices(matrix1, matrix2)
print_matrix(add_result)

print("\nSubtraction of matrices:")
sub_result = subtract_matrices(matrix1, matrix2)
print_matrix(sub_result)

matrix3 = [
    [1, 2],
    [3, 4],
    [5, 6]
]

print("\nMultiplication of matrices:")
mult_result = multiply_matrices(matrix1, matrix3)
print_matrix(mult_result)

print("\nTranspose of first matrix:")
transpose_result = transpose_matrix(matrix1)
print_matrix(transpose_result)
