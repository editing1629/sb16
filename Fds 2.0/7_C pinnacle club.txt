#include <iostream>
#include <string>
using namespace std;

struct Node {
    string PRN;
    string name;
    Node* next;
};

class PinnacleClub {
private:
    Node* head;

public:
    PinnacleClub() {
        head = nullptr;
    }

    void addMember(string prn, string name) {
        Node* newNode = new Node;
        newNode->PRN = prn;
        newNode->name = name;
        newNode->next = nullptr;

        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    void deleteMember(string prn) {
        if (head == nullptr) {
            cout << "No members to delete." << endl;
            return;
        }

        if (head->PRN == prn) {
            Node* temp = head;
            head = head->next;
            delete temp;
            cout << "Member with PRN " << prn << " deleted." << endl;
            return;
        }

        Node* temp = head;
        while (temp->next != nullptr && temp->next->PRN != prn) {
            temp = temp->next;
        }

        if (temp->next == nullptr) {
            cout << "Member with PRN " << prn << " not found." << endl;
        } else {
            Node* toDelete = temp->next;
            temp->next = temp->next->next;
            delete toDelete;
            cout << "Member with PRN " << prn << " deleted." << endl;
        }
    }

    void deletePresident() {
        if (head == nullptr) {
            cout << "No president to delete." << endl;
            return;
        }

        Node* temp = head;
        head = head->next;
        delete temp;
        cout << "President deleted." << endl;
    }

    void deleteSecretary() {
        if (head == nullptr || head->next == nullptr) {
            cout << "No secretary to delete." << endl;
            return;
        }

        Node* temp = head;
        while (temp->next->next != nullptr) {
            temp = temp->next;
        }

        Node* toDelete = temp->next;
        temp->next = nullptr;
        delete toDelete;
        cout << "Secretary deleted." << endl;
    }

    int totalMembers() {
        int count = 0;
        Node* temp = head;
        while (temp != nullptr) {
            count++;
            temp = temp->next;
        }
        return count;
    }

    void displayMembers() {
        if (head == nullptr) {
            cout << "No members to display." << endl;
            return;
        }

        Node* temp = head;
        while (temp != nullptr) {
            cout << "PRN: " << temp->PRN << ", Name: " << temp->name << endl;
            temp = temp->next;
        }
    }

    void concatenate(PinnacleClub& otherClub) {
        if (head == nullptr) {
            head = otherClub.head;
            otherClub.head = nullptr;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = otherClub.head;
            otherClub.head = nullptr;
        }
    }
};

int main() {
    PinnacleClub division1;
    PinnacleClub division2;

    division1.addMember("PRN001", "Alice");
    division1.addMember("PRN002", "Bob");
    division1.addMember("PRN003", "Charlie");

    division2.addMember("PRN004", "David");
    division2.addMember("PRN005", "Eve");

    cout << "Division 1 Members:" << endl;
    division1.displayMembers();

    cout << "\nDivision 2 Members:" << endl;
    division2.displayMembers();

    cout << "\nConcatenating Division 2 to Division 1..." << endl;
    division1.concatenate(division2);

    cout << "\nAfter Concatenation, Division 1 Members:" << endl;
    division1.displayMembers();

    cout << "\nTotal Members in Division 1: " << division1.totalMembers() << endl;

    division1.deleteMember("PRN002");

    cout << "\nAfter Deleting Member PRN002:" << endl;
    division1.displayMembers();

    division1.deletePresident();

    cout << "\nAfter Deleting President:" << endl;
    division1.displayMembers();

    division1.deleteSecretary();

    cout << "\nAfter Deleting Secretary:" << endl;
    division1.displayMembers();

    return 0;
}
